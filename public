<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>傘シェアリング</title>
    <style>
        body { font-family: sans-serif; text-align: center; padding: 20px; background-color: #f0f2f5; }
        .container { max-width: 400px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        p { color: #666; font-size: 18px; }
        button { display: block; width: 100%; padding: 15px; font-size: 18px; font-weight: bold; color: white; border: none; border-radius: 8px; cursor: pointer; transition: background-color 0.2s; margin-top: 20px;}
        .borrow-btn { background-color: #00B900; } /* 貸出ボタン */
        .return-btn { background-color: #007BFF; } /* 返却ボタン */
        button:disabled { background-color: #ccc; cursor: not-allowed; }
        .message { margin-top: 20px; font-size: 16px; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="title">傘シェアリング</h1>
        <p id="infoText">情報を読み込んでいます...</p>
        <div id="buttonArea"></div>
        <div id="resultMessage" class="message"></div>
    </div>

    <script src="https://static.line-scdn.net/liff/edge/2/sdk.js"></script>
    <script>
        // ▼▼▼ あなたの情報を入力してください ▼▼▼
        const API_URL = 'https://kasa-rental-app.onrender.com/api/action'; // ★Renderで取得したURL + /api/action
        const LIFF_ID = '2007692230-DP9Qo40W'; // ★あなたのLIFF ID
        // ▲▲▲ あなたの情報を入力してください ▲▲▲

        async function main() {
            try {
                await liff.init({ liffId: LIFF_ID });

                if (!liff.isLoggedIn()) {
                    liff.login();
                    return;
                }

                const urlParams = new URLSearchParams(window.location.search);
                const umbrellaId = urlParams.get('umbrellaId');

                if (!umbrellaId) {
                    document.getElementById('infoText').innerText = 'QRコードをスキャンしてアクセスしてください。';
                    return;
                }

                const profile = await liff.getProfile();
                
                const statusResponse = await postToBackend({
                    action: 'checkStatus',
                    umbrellaId: umbrellaId,
                    userId: profile.userId
                });

                const statusData = await statusResponse.json();
                updateUI(statusData, umbrellaId, profile);

            } catch (error) {
                console.error("初期化またはステータス確認中にエラー:", error);
                document.getElementById('infoText').innerText = 'エラーが発生しました。ページを再読み込みしてください。';
            }
        }

        function updateUI(statusData, umbrellaId, profile) {
            const infoText = document.getElementById('infoText');
            const buttonArea = document.getElementById('buttonArea');
            
            infoText.innerHTML = `傘ID: <strong>${umbrellaId}</strong>`;
            buttonArea.innerHTML = ''; 

            if (statusData.status === '利用可能') {
                infoText.innerHTML += '<br>この傘は利用可能です。';
                const button = createButton('この傘を借りる', 'borrow-btn', () => handleAction('borrow', umbrellaId, profile));
                buttonArea.appendChild(button);
            } else if (statusData.status === '貸出中') {
                if (statusData.lentToCurrentUser) {
                    infoText.innerHTML += '<br>あなたが借りている傘です。';
                    const button = createButton('この傘を返却する', 'return-btn', () => handleAction('return', umbrellaId, profile));
                    buttonArea.appendChild(button);
                } else {
                    infoText.innerHTML += '<br>この傘は他の人に貸し出し中です。';
                }
            } else {
                infoText.innerText = 'エラー：この傘は存在しません。';
            }
        }
        
        function createButton(text, className, onClick) {
            const button = document.createElement('button');
            button.innerText = text;
            button.className = className;
            button.onclick = onClick;
            return button;
        }

        async function handleAction(action, umbrellaId, profile) {
            const button = document.querySelector('#buttonArea button');
            button.disabled = true;
            button.innerText = '処理中...';

            try {
                const response = await postToBackend({
                    action: action,
                    umbrellaId: umbrellaId,
                    userId: profile.userId,
                    displayName: profile.displayName
                });
                const result = await response.json();
                
                const resultMessage = document.getElementById('resultMessage');
                if (result.success) {
                    resultMessage.innerText = result.message;
                    resultMessage.style.color = 'green';
                    buttonArea.innerHTML = '';
                } else {
                    throw new Error(result.message);
                }

            } catch (error) {
                document.getElementById('resultMessage').innerText = `エラー: ${error.message}`;
                document.getElementById('resultMessage').style.color = 'red';
                button.disabled = false;
                button.innerText = action === 'borrow' ? 'この傘を借りる' : 'この傘を返却する';
            }
        }

        function postToBackend(data) {
             return fetch(API_URL, {
                method: 'POST',
                mode: 'cors',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });
        }

        main();
    </script>
</body>
</html>
